(set-logic UFLIRA)
(declare-fun C_4_presence () Bool)
(declare-fun C (Int) Bool)
(declare-fun B_4_presence () Bool)
(declare-fun Measure_2_presence () Bool)
(declare-fun Measure (Int Int) Bool)
(declare-fun A (Int) Bool)
(declare-fun B (Int) Bool)
(declare-fun Measure_1_presence () Bool)
(declare-fun Measure_0_presence () Bool)
(declare-fun A_6_presence () Bool)
(assert (let ((.def_0 (forall ((Measure_2_time Int)(Measure_2_m1 Int)) (let ((.def_0 (<= 0 Measure_2_time))) (let ((.def_1 (and .def_0 true))) (let ((.def_2 (=> Measure_2_presence .def_1))) (let ((.def_3 (Measure Measure_2_time Measure_2_m1))) (let ((.def_4 (not .def_3))) (let ((.def_5 (or .def_4 .def_2))) .def_5)))))))))(let ((.def_1 (forall ((C_4_time Int)) (let ((.def_0 (<= 0 C_4_time))) (let ((.def_1 (=> C_4_presence .def_0))) (let ((.def_2 (C C_4_time))) (let ((.def_3 (not .def_2))) (let ((.def_4 (or .def_3 .def_1))) .def_4))))))))(let ((.def_2 (forall ((B_4_time Int)) (let ((.def_0 (<= 0 B_4_time))) (let ((.def_1 (=> B_4_presence .def_0))) (let ((.def_2 (B B_4_time))) (let ((.def_3 (not .def_2))) (let ((.def_4 (or .def_3 .def_1))) .def_4))))))))(let ((.def_3 (forall ((A_6_time Int)) (let ((.def_0 (<= 0 A_6_time))) (let ((.def_1 (=> A_6_presence .def_0))) (let ((.def_2 (A A_6_time))) (let ((.def_3 (not .def_2))) (let ((.def_4 (or .def_3 .def_1))) .def_4))))))))(let ((.def_4 (exists ((t_C_3_time Int)) (let ((.def_0 (forall ((C_3_time Int)) (let ((.def_0 (<= C_3_time t_C_3_time))) (let ((.def_1 (C C_3_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (C t_C_3_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_5 (exists ((t_C_2_time Int)) (let ((.def_0 (forall ((C_2_time Int)) (let ((.def_0 (<= t_C_2_time C_2_time))) (let ((.def_1 (C C_2_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (C t_C_2_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_6 (and .def_5 .def_4))) (let ((.def_7 (forall ((C_1_time Int)) (let ((.def_0 (not true))) (let ((.def_1 (C C_1_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_8 (or .def_7 .def_6))) (let ((.def_9 (exists ((t_B_2_time Int)) (let ((.def_0 (forall ((B_3_time Int)) (let ((.def_0 (<= B_3_time t_B_2_time))) (let ((.def_1 (B B_3_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (B t_B_2_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_10 (exists ((t_B_1_time Int)) (let ((.def_0 (forall ((B_2_time Int)) (let ((.def_0 (<= t_B_1_time B_2_time))) (let ((.def_1 (B B_2_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (B t_B_1_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_11 (and .def_10 .def_9))) (let ((.def_12 (forall ((B_1_time Int)) (let ((.def_0 (not true))) (let ((.def_1 (B B_1_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_13 (or .def_12 .def_11))) (let ((.def_14 (exists ((t_A_2_time Int)) (let ((.def_0 (forall ((A_5_time Int)) (let ((.def_0 (<= A_5_time t_A_2_time))) (let ((.def_1 (A A_5_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (A t_A_2_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_15 (exists ((t_A_1_time Int)) (let ((.def_0 (forall ((A_4_time Int)) (let ((.def_0 (<= t_A_1_time A_4_time))) (let ((.def_1 (A A_4_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (A t_A_1_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_16 (and .def_15 .def_14))) (let ((.def_17 (forall ((A_3_time Int)) (let ((.def_0 (not true))) (let ((.def_1 (A A_3_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_18 (or .def_17 .def_16))) (let ((.def_19 (forall ((Measure_0_time Int)(Measure_0_m1 Int)) (let ((.def_0 (forall ((Measure_1_time Int)(Measure_1_m1 Int)) (let ((.def_0 (= Measure_0_presence Measure_1_presence))) (let ((.def_1 (= Measure_0_m1 Measure_1_m1))) (let ((.def_2 (= Measure_0_time Measure_1_time))) (let ((.def_3 (and .def_2 .def_1 .def_0))) (let ((.def_4 (not .def_2))) (let ((.def_5 (or .def_4 .def_3))) (let ((.def_6 (Measure Measure_1_time Measure_1_m1))) (let ((.def_7 (not .def_6))) (let ((.def_8 (or .def_7 .def_5))) .def_8))))))))))))(let ((.def_1 (Measure Measure_0_time Measure_0_m1))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_20 (forall ((A_2_time Int)) (let ((.def_0 (exists ((t_Measure_4_time Int)(t_Measure_4_m1 Int)) (let ((.def_0 (forall ((C_0_time Int)) (let ((.def_0 (+ A_2_time 0))) (let ((.def_1 (<= .def_0 C_0_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (+ A_2_time 11))) (let ((.def_4 (<= C_0_time .def_3))) (let ((.def_5 (not .def_4))) (let ((.def_6 (or .def_5 .def_2))) (let ((.def_7 (C C_0_time))) (let ((.def_8 (not .def_7))) (let ((.def_9 (or .def_8 .def_6))) .def_9)))))))))))))(let ((.def_1 (= A_2_time t_Measure_4_time))) (let ((.def_2 (and .def_1 .def_0))) (let ((.def_3 (Measure t_Measure_4_time t_Measure_4_m1))) (let ((.def_4 (and .def_3 .def_2))) .def_4))))))))(let ((.def_1 (A A_2_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_21 (forall ((A_1_time Int)) (let ((.def_0 (exists ((t_Measure_3_time Int)(t_Measure_3_m1 Int)) (let ((.def_0 (exists ((t_C_1_time Int)) (let ((.def_0 (+ A_1_time 0))) (let ((.def_1 (<= .def_0 t_C_1_time))) (let ((.def_2 (+ A_1_time 15))) (let ((.def_3 (<= t_C_1_time .def_2))) (let ((.def_4 (and .def_3 .def_1))) (let ((.def_5 (C t_C_1_time))) (let ((.def_6 (and .def_5 .def_4))) .def_6))))))))))(let ((.def_1 (< t_Measure_3_m1 20))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) (let ((.def_4 (= A_1_time t_Measure_3_time))) (let ((.def_5 (and .def_4 .def_3))) (let ((.def_6 (Measure t_Measure_3_time t_Measure_3_m1))) (let ((.def_7 (and .def_6 .def_5))) .def_7)))))))))))(let ((.def_1 (A A_1_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_22 (forall ((B_0_time Int)) (let ((.def_0 (exists ((t_Measure_2_time Int)(t_Measure_2_m1 Int)) (let ((.def_0 (exists ((t_C_0_time Int)) (let ((.def_0 (+ B_0_time 0))) (let ((.def_1 (<= .def_0 t_C_0_time))) (let ((.def_2 (+ B_0_time 7))) (let ((.def_3 (<= t_C_0_time .def_2))) (let ((.def_4 (and .def_3 .def_1))) (let ((.def_5 (C t_C_0_time))) (let ((.def_6 (and .def_5 .def_4))) .def_6))))))))))(let ((.def_1 (= B_0_time t_Measure_2_time))) (let ((.def_2 (and .def_1 .def_0))) (let ((.def_3 (Measure t_Measure_2_time t_Measure_2_m1))) (let ((.def_4 (and .def_3 .def_2))) .def_4))))))))(let ((.def_1 (B B_0_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_23 (forall ((A_0_time Int)) (let ((.def_0 (exists ((t_Measure_1_time Int)(t_Measure_1_m1 Int)) (let ((.def_0 (exists ((t_B_0_time Int)) (let ((.def_0 (+ A_0_time 0))) (let ((.def_1 (<= .def_0 t_B_0_time))) (let ((.def_2 (+ A_0_time 7))) (let ((.def_3 (<= t_B_0_time .def_2))) (let ((.def_4 (and .def_3 .def_1))) (let ((.def_5 (B t_B_0_time))) (let ((.def_6 (and .def_5 .def_4))) .def_6))))))))))(let ((.def_1 (= A_0_time t_Measure_1_time))) (let ((.def_2 (and .def_1 .def_0))) (let ((.def_3 (Measure t_Measure_1_time t_Measure_1_m1))) (let ((.def_4 (and .def_3 .def_2))) .def_4))))))))(let ((.def_1 (A A_0_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_24 (exists ((t_A_0_time Int)) (let ((.def_0 (exists ((t_Measure_0_time Int)(t_Measure_0_m1 Int)) (let ((.def_0 (= t_A_0_time t_Measure_0_time))) (let ((.def_1 (Measure t_Measure_0_time t_Measure_0_m1))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_1 (A t_A_0_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_25 (and .def_24 .def_23 .def_22 .def_21 .def_20 .def_19 .def_18 .def_13 .def_8 .def_3 .def_2 .def_1 .def_0))) .def_25)))))))))))))))))))))))))))
(check-sat)
