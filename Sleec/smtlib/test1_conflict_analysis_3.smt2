(set-logic UFLIRA)
(declare-fun C (Int) Bool)
(declare-fun Measure_10_presence () Bool)
(declare-fun Measure_11_presence () Bool)
(declare-fun C_19_presence () Bool)
(declare-fun Measure (Int Int) Bool)
(declare-fun B_19_presence () Bool)
(declare-fun A (Int) Bool)
(declare-fun Measure_9_presence () Bool)
(declare-fun B (Int) Bool)
(declare-fun A_27_presence () Bool)
(assert (let ((.def_0 (forall ((Measure_11_time Int)(Measure_11_m1 Int)) (let ((.def_0 (<= 0 Measure_11_time))) (let ((.def_1 (and .def_0 true))) (let ((.def_2 (=> Measure_11_presence .def_1))) (let ((.def_3 (Measure Measure_11_time Measure_11_m1))) (let ((.def_4 (not .def_3))) (let ((.def_5 (or .def_4 .def_2))) .def_5)))))))))(let ((.def_1 (forall ((C_19_time Int)) (let ((.def_0 (<= 0 C_19_time))) (let ((.def_1 (=> C_19_presence .def_0))) (let ((.def_2 (C C_19_time))) (let ((.def_3 (not .def_2))) (let ((.def_4 (or .def_3 .def_1))) .def_4))))))))(let ((.def_2 (forall ((B_19_time Int)) (let ((.def_0 (<= 0 B_19_time))) (let ((.def_1 (=> B_19_presence .def_0))) (let ((.def_2 (B B_19_time))) (let ((.def_3 (not .def_2))) (let ((.def_4 (or .def_3 .def_1))) .def_4))))))))(let ((.def_3 (forall ((A_27_time Int)) (let ((.def_0 (<= 0 A_27_time))) (let ((.def_1 (=> A_27_presence .def_0))) (let ((.def_2 (A A_27_time))) (let ((.def_3 (not .def_2))) (let ((.def_4 (or .def_3 .def_1))) .def_4))))))))(let ((.def_4 (exists ((t_C_15_time Int)) (let ((.def_0 (forall ((C_18_time Int)) (let ((.def_0 (<= C_18_time t_C_15_time))) (let ((.def_1 (C C_18_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (C t_C_15_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_5 (exists ((t_C_14_time Int)) (let ((.def_0 (forall ((C_17_time Int)) (let ((.def_0 (<= t_C_14_time C_17_time))) (let ((.def_1 (C C_17_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (C t_C_14_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_6 (and .def_5 .def_4))) (let ((.def_7 (forall ((C_16_time Int)) (let ((.def_0 (not true))) (let ((.def_1 (C C_16_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_8 (or .def_7 .def_6))) (let ((.def_9 (exists ((t_B_12_time Int)) (let ((.def_0 (forall ((B_18_time Int)) (let ((.def_0 (<= B_18_time t_B_12_time))) (let ((.def_1 (B B_18_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (B t_B_12_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_10 (exists ((t_B_11_time Int)) (let ((.def_0 (forall ((B_17_time Int)) (let ((.def_0 (<= t_B_11_time B_17_time))) (let ((.def_1 (B B_17_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (B t_B_11_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_11 (and .def_10 .def_9))) (let ((.def_12 (forall ((B_16_time Int)) (let ((.def_0 (not true))) (let ((.def_1 (B B_16_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_13 (or .def_12 .def_11))) (let ((.def_14 (exists ((t_A_10_time Int)) (let ((.def_0 (forall ((A_26_time Int)) (let ((.def_0 (<= A_26_time t_A_10_time))) (let ((.def_1 (A A_26_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (A t_A_10_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_15 (exists ((t_A_9_time Int)) (let ((.def_0 (forall ((A_25_time Int)) (let ((.def_0 (<= t_A_9_time A_25_time))) (let ((.def_1 (A A_25_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_1 (A t_A_9_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_16 (and .def_15 .def_14))) (let ((.def_17 (forall ((A_24_time Int)) (let ((.def_0 (not true))) (let ((.def_1 (A A_24_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_18 (or .def_17 .def_16))) (let ((.def_19 (forall ((Measure_9_time Int)(Measure_9_m1 Int)) (let ((.def_0 (forall ((Measure_10_time Int)(Measure_10_m1 Int)) (let ((.def_0 (= Measure_9_presence Measure_10_presence))) (let ((.def_1 (= Measure_9_m1 Measure_10_m1))) (let ((.def_2 (= Measure_9_time Measure_10_time))) (let ((.def_3 (and .def_2 .def_1 .def_0))) (let ((.def_4 (not .def_2))) (let ((.def_5 (or .def_4 .def_3))) (let ((.def_6 (Measure Measure_10_time Measure_10_m1))) (let ((.def_7 (not .def_6))) (let ((.def_8 (or .def_7 .def_5))) .def_8))))))))))))(let ((.def_1 (Measure Measure_9_time Measure_9_m1))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_20 (forall ((A_23_time Int)) (let ((.def_0 (exists ((t_Measure_19_time Int)(t_Measure_19_m1 Int)) (let ((.def_0 (forall ((C_15_time Int)) (let ((.def_0 (+ A_23_time 0))) (let ((.def_1 (<= .def_0 C_15_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (+ A_23_time 11))) (let ((.def_4 (<= C_15_time .def_3))) (let ((.def_5 (not .def_4))) (let ((.def_6 (or .def_5 .def_2))) (let ((.def_7 (C C_15_time))) (let ((.def_8 (not .def_7))) (let ((.def_9 (or .def_8 .def_6))) .def_9)))))))))))))(let ((.def_1 (= A_23_time t_Measure_19_time))) (let ((.def_2 (and .def_1 .def_0))) (let ((.def_3 (Measure t_Measure_19_time t_Measure_19_m1))) (let ((.def_4 (and .def_3 .def_2))) .def_4))))))))(let ((.def_1 (A A_23_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_21 (forall ((A_22_time Int)) (let ((.def_0 (exists ((t_Measure_18_time Int)(t_Measure_18_m1 Int)) (let ((.def_0 (exists ((t_C_13_time Int)) (let ((.def_0 (+ A_22_time 0))) (let ((.def_1 (<= .def_0 t_C_13_time))) (let ((.def_2 (+ A_22_time 15))) (let ((.def_3 (<= t_C_13_time .def_2))) (let ((.def_4 (and .def_3 .def_1))) (let ((.def_5 (C t_C_13_time))) (let ((.def_6 (and .def_5 .def_4))) .def_6))))))))))(let ((.def_1 (< t_Measure_18_m1 20))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) (let ((.def_4 (= A_22_time t_Measure_18_time))) (let ((.def_5 (and .def_4 .def_3))) (let ((.def_6 (Measure t_Measure_18_time t_Measure_18_m1))) (let ((.def_7 (and .def_6 .def_5))) .def_7)))))))))))(let ((.def_1 (A A_22_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_22 (forall ((B_15_time Int)) (let ((.def_0 (exists ((t_Measure_17_time Int)(t_Measure_17_m1 Int)) (let ((.def_0 (exists ((t_C_12_time Int)) (let ((.def_0 (+ B_15_time 0))) (let ((.def_1 (<= .def_0 t_C_12_time))) (let ((.def_2 (+ B_15_time 7))) (let ((.def_3 (<= t_C_12_time .def_2))) (let ((.def_4 (and .def_3 .def_1))) (let ((.def_5 (C t_C_12_time))) (let ((.def_6 (and .def_5 .def_4))) .def_6))))))))))(let ((.def_1 (= B_15_time t_Measure_17_time))) (let ((.def_2 (and .def_1 .def_0))) (let ((.def_3 (Measure t_Measure_17_time t_Measure_17_m1))) (let ((.def_4 (and .def_3 .def_2))) .def_4))))))))(let ((.def_1 (B B_15_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_23 (forall ((A_21_time Int)) (let ((.def_0 (exists ((t_Measure_16_time Int)(t_Measure_16_m1 Int)) (let ((.def_0 (exists ((t_B_10_time Int)) (let ((.def_0 (+ A_21_time 0))) (let ((.def_1 (<= .def_0 t_B_10_time))) (let ((.def_2 (+ A_21_time 7))) (let ((.def_3 (<= t_B_10_time .def_2))) (let ((.def_4 (and .def_3 .def_1))) (let ((.def_5 (B t_B_10_time))) (let ((.def_6 (and .def_5 .def_4))) .def_6))))))))))(let ((.def_1 (= A_21_time t_Measure_16_time))) (let ((.def_2 (and .def_1 .def_0))) (let ((.def_3 (Measure t_Measure_16_time t_Measure_16_m1))) (let ((.def_4 (and .def_3 .def_2))) .def_4))))))))(let ((.def_1 (A A_21_time))) (let ((.def_2 (not .def_1))) (let ((.def_3 (or .def_2 .def_0))) .def_3)))))))(let ((.def_24 (exists ((t_A_8_time Int)) (let ((.def_0 (exists ((t_Measure_15_time Int)(t_Measure_15_m1 Int)) (let ((.def_0 (= t_A_8_time t_Measure_15_time))) (let ((.def_1 (Measure t_Measure_15_time t_Measure_15_m1))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_1 (A t_A_8_time))) (let ((.def_2 (and .def_1 .def_0))) .def_2))))))(let ((.def_25 (and .def_24 .def_23 .def_22 .def_21 .def_20 .def_19 .def_18 .def_13 .def_8 .def_3 .def_2 .def_1 .def_0))) .def_25)))))))))))))))))))))))))))
(check-sat)
